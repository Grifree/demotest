var hljs = require('highlight.js')
var ejs = require('ejs')
var cheerio = require('cheerio')
var md5 = require('md5')
var extend = require('extend')

var marked = require('./lib/marked')

/*
    编译 ````js\r\ncontent\r\n```` 并记录内容将内容替换为 md5 
    marked 执行后再根据 oRunCodeMap 还原信息
*/
var oRunCodeMap = {}

var _config = require('./lib/config')

function compileRunCode (content, conf) {

    hljs.configure(conf.hljs);
    content = content.replace(/````([a-z]*)([\s\S]*?)````/g, function () {
        var arg = arguments
        var pre = arg[0]
        // ```` 默认 为 ````html
        var lang = arg[1] || 'html'
        var code = arg[2]
        var output = ''


        switch (lang) {
            case 'css':
            output = '<div style="display:none;" data-type="' + lang + '" >\r\n<style>' + code + '</style>\r\n</div>'
            break
            case 'js':
            output = '<div style="display:none;" data-type="' + lang + '" >\r\n<script>' + code + '</script>\r\n</div>'
            break
            case 'html':
            output = '<div data-type="' + lang + '" >\r\n' + code + '<div style="clear:both;" ></div>\r\n</div>'
            break
            default:
            if (conf.codeCompile[lang]) {
                var compile = conf.codeCompile[lang](code)
                switch (compile.type) {
                    case 'css':
                        output = '<div style="display:none;" data-type="' + lang + '" >\r\n<style>' + compile.code + '</style>\r\n</div>'
                    break
                    case 'js':
                        output = '<div style="display:none;" data-type="' + lang + '" >\r\n<script>' + compile.code + '</script>\r\n</div>'
                    break
                }
            }
        }
        code = '<pre data-type="' + lang + '" >' + hljs.highlight(lang, code).value + '</pre>'
        /*
        当内容是这种情况时

            some text<pre>
            - demo
            - css
            - hahah
            </pre>

        没有 \r\n 会出bug
        */

        var placeholder = md5(code)
        oRunCodeMap[placeholder] = output + '\r\n<div class="fis-marked-template-highlight">' + code + '</div>'
        return placeholder
    })
    return content
}



function compile (content, file, conf){

    // 将 markdown 中链接地址转换为编译后的地址
    function mdtouri (str) {
        return str.replace(/href="([^"]+?\.md)"/g, function () {
            var path = arguments[1]
            // Ref: http://fis.baidu.com/fis3/api/fis.uri.html
            var targetFile = fis.uri(path).file || {}
            var url = targetFile.url || path
            // https://github.com/fex-team/fis3-hook-relative
            // relative api
            if (file.relative) {
                var message = {
                    target: url,
                    file: file
                }
                fis.emit('plugin:relative:fetch', message);
                url = message.ret
            }
            return 'href="' + url + '"'
        })
    }

    conf = extend(true, _config, conf)
    if (typeof conf.defaultTemplate === 'function') {
        // ref https://github.com/nuysoft/Mock/blob/refactoring/src/mock/util.js
        conf.defaultTemplate = conf.defaultTemplate.toString()
                                .replace(/^[^\/]+\/\*!?/, '')
                                .replace(/\*\/[^\/]+$/, '')
                                .replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '') // .trim()
    }
    hljs.configure(conf.hljs);
    marked.setOptions(conf.marked)

    var renderData = {}

    content = compileRunCode(content, conf)

    content.replace(/<!--CONFIG([\s\S]+)CONFIG-->/, function (content, json) {
        if (json) {
            try {
                renderData = JSON.parse(json.trim())
            } catch (err) {
                fis.log(err)
                fis.log(file.origin + " <!--CONFIG JSON CONFIG--> 中 JSON 格式错误")
            }
        }
    })
    renderData.template = renderData.template || 'default.html'

    var template
    var templatePath = fis.project.getProjectPath() + conf.templateDir + renderData.template
    if (fis.util.isFile(templatePath)) {
        template = fis.util.read(templatePath)
        file.cache.addDeps(templatePath)
        /*
            <%- include("/nav.md") %>
        */
        template = template.replace(/<%-\s?include\(['"]([^'"]+)['"]\);?\s?%>/g,function () {
            var path = fis.project.getProjectPath() + arguments[1]
            file.cache.addDeps(path)
            if (fis.util.isFile(path)) {
                var content = fis.util.read(path)
                return content
            }
            else {
                return '<!-- not find ' + path +  ' -->'
            }
            return path
        })
    }
    else {
        template = conf.defaultTemplate
    }
    content = marked(content)
    content = mdtouri(content)
    var $ = cheerio.load(content)

    renderData.title = renderData.title || $('h1').eq(0).text() || $('h2').eq(0).text() || $('h3').eq(0).text()
    renderData.content = content
    var html = ejs.render(template, renderData)

    var hash
    for(hash in oRunCodeMap) {
        html = html.replace(new RegExp(hash,'g'), oRunCodeMap[hash])
    }
    html = html.replace(/<!--HTML([\S\s]*)?HTML-->/g, '$1')
    return html
}


module.exports = compile